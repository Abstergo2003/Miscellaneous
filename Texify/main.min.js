let decimals=4;const symbols=["alpha","Alpha","beta","Beta","gamma","Gamma","delta","Delta","epsilon","Epsilon","zeta","Zeta","eta","Eta","theta","Theta","iota","Iota","kappa","Kappa","lambda","Lambda","mu","Mu","nu","Nu","xi","Xi","omicron","Omicron","pi","Pi","rho","Rho","sigma","Sigma","varsigma","tau","Tau","upsilon","Upsilon","phi","Phi","varphi","chi","Chi","psi","Psi","omega","Omega"];function parseSource(e,t,a){for(let n=0;n<e.length;n++){let i=e[n];if(-1!=i.indexOf("#skip")){n+=+i.replace("#skip","")}let l={name:"",value:"",type:"numeric",comment:""};i=i.replace(/\n/g,"");const o=i.indexOf("#");-1!==o&&(l.comment=i.slice(o+1,i.length),i=i.slice(0,o));const r=i.indexOf("=");let c;c=-1!==r?i.slice(0,r).replace(/\s/g,""):i;let s=i.slice(r+1,i.length);if(l.name=c,isNaN(s)||""===s.trim())if(isEquation(s)){l.type="equation";const e=stripStringFromPythonFunctions(s);try{l.equation=Parser.parse(e)}catch(t){console.error(`Failed to parse equation: ${e}`,t)}l.stringEquation=e}else l.type="string",l.value=s;else l.value=+s,l.type="numeric";""!==c&&" "!==c&&(calculate(l,a),a[l.name]=l.value,createStringRepresentation(l,a),addToFile(`${l.stringEquation} \\\\\n`),t.push(l))}}function convertGreekSymbols(e){for(let t of symbols)e=e.replaceAll(t,`\\${t}`);return e}function addToFile(e){e=(e=convertGreekSymbols(e)).replaceAll(/_(.*?)_/g,"_{$1}"),document.getElementById("fileContent").textContent+=e.replaceAll("%","\\%")}function isEquation(e){return["+","-","*","/","^"," + "].some((t=>e.includes(t)))}function stripStringFromPythonFunctions(e){const t=e.indexOf(",");return-1!==t&&(e=e.slice(0,t)),(e=(e=(e=e.replace(/round\(/g,"")).replace(/\*\*/g,"^")).replace("*"," * ")).replace(/math\./g,"")}function calculate(e,t){if("equation"===e.type){const a=createCalculateObj(getVariables(e.equation.tokens),t);try{e.value=e.equation.evaluate(a)}catch(t){console.error(`Failed to evaluate equation: ${e.stringEquation}`,t)}}}function getVariables(e){const t=[];for(let a of e)"IVAR"===a.type&&t.push(a.value);return t}function createCalculateObj(e,t){let a={};for(let n of e)a[n]=findVariableValue(n,t);return a}function findVariableValue(e,t){return t[e]?t[e]:0}function createStringRepresentation(e,t){if("equation"==e.type){let a=e.stringEquation;e.stringEquation=e.stringEquation+"=";const n=e.stringEquation.replaceAll("(","").replaceAll(")","").replace("=","").replaceAll("asin","").replaceAll("asin","").replaceAll("acos","").replaceAll("atan","").replaceAll("acot","").replaceAll("sin","").replaceAll("cos","").replaceAll("tan","").replaceAll("cot","").split(" ");for(let e of n)if(-1!=e.indexOf("^")&&(e=e.split("^")[0]),!isEquation(e)&&isNaN(e)&&" "!=e){const n=findVariableValue(e,t);a=isInt(n)?a.replace(e,`${n.toFixed(1)}`):a.replace(e,n.toFixed(decimals))}const i=e.value;isInt(i)?e.stringEquation=(e.name+" = "+e.stringEquation+a+" = "+i.toFixed(1)+` ${e.comment}`).replaceAll("  "," "):e.stringEquation=(e.name+" = "+e.stringEquation+a+" = "+i.toFixed(decimals)+` ${e.comment}`).replaceAll("  "," ")}else{isInt(e.value)?e.stringEquation=`${e.name} = ${e.value.toFixed(1)} ${e.comment}`:e.stringEquation=`${e.name} = ${e.value.toFixed(decimals)} ${e.comment}`}}function isInt(e){return parseInt(e)===e}